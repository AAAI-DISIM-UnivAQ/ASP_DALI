:- use_module(library(sockets)),
   use_module(library(random3)),
   use_module(library(lists)).

:-dynamic current_identifier/1.
:-dynamic current_size/1.
:-dynamic current_forbidden/2.
:-dynamic system_state/1.
:-dynamic number_of_forbidden/1.
:-dynamic size_move_to_evaluate/1.
:-dynamic move_to_evaluate/4.
:-dynamic trivial_reached/2.


system_state(0).

net_ip(localhost).
net_port(3333).

open_web_socket(Stream):- net_ip(IP), net_port(PORT), socket_client_open(IP:PORT, Stream, [type(text)]).
close_web_socket(Stream):- close(Stream).

ack:- agent(M), open_web_socket(Stream),
                write(Stream,M), write(Stream,'_.._'),
                current_identifier(Identifier),
                write(Stream,Identifier),
                close_web_socket(Stream).

sendData(X) :- agent(M), open_web_socket(Stream),
               write(Stream,M), write(Stream,'_.._'),
               current_identifier(Identifier),
               write(Stream,Identifier), write(Stream,'_.._'),
               write(Stream,X),
               close_web_socket(Stream).
sendData(X, Y) :- agent(M), open_web_socket(Stream),
               write(Stream,M), write(Stream,'_.._'),
               current_identifier(Identifier),
               write(Stream,Identifier), write(Stream,'_.._'),
               write(Stream,X), write(Stream,'_.._'),
               write(Stream,Y),
               close_web_socket(Stream).


save_forbidden([]).
save_forbidden([X|[Y|T]]):- assert(current_forbidden(X,Y)), save_forbidden(T).

save_moves([], []).
save_moves([X1|[Y1|[X2|[Y2|T]]]],[move(X1,Y1, X2, Y2)|M]):- save_moves(T,M).
save_moves(Moves, FunctorMoves):-true.

normalize_int(X,StrX):- name(X,L), name(StrX,L).

next_state:- system_state(S), retractall(system_state(_)), S1 is S+1, assert(system_state(S1)), write('Agent state: '), write(S1), nl, normalize_int(S1,StrX), sendData('as',StrX).
prev_state:- system_state(0).
prev_state:- system_state(S), retractall(system_state(_)), S1 is S-1, assert(system_state(S1)).
reset_state:- retractall(system_state(_)), assert(system_state(0)), sendData('rs').

evaluate_path:- trivial_evaluation(Cicle), retractall(move_to_evaluate(_,_,_,_)), saveBestCicle(Cicle), sendPath, true.
evaluate_path:- send_failed(3), launch_instance(3), true.

trivial_evaluation(L):-searchCicles(L), length(L, Len), Len>2.
simple_evaluation:-searchBestTour(Cicle).

searchBestTour(Cicle):-longest_cicle(Cicle), retractall(move_to_evaluate(_,_,_,_)), saveBestCicle(Cicle).

saveBestCicle([]):-true.
saveBestCicle([move(X1,Y1,X2,Y2)|T]):- assert(move_to_evaluate(X1,Y1,X2,Y2)), saveBestCicle(T).

searchCicles([move(X1,Y1,X2,Y2)|L]):-move_to_evaluate(X1,Y1,X2,Y2), cicle(X1,Y1,X2,Y2, L).
cicle(X,Y,X1,Y1,[move(X1,Y1,X,Y)|[]]):- move_to_evaluate(X1,Y1,X,Y), retract(move_to_evaluate(X1,Y1,X,Y)).
cicle(X,Y,X1,Y1,[move(X1,Y1,X2,Y2)|L]):-move_to_evaluate(X1,Y1,X2,Y2), retract(move_to_evaluate(X1,Y1,X2,Y2)), cicle(X,Y,X2,Y2, L).

get_longer_list(L1, L2, L1) :- length(L1, Len1), length(L2, Len2), Len1 > Len2.
get_longer_list(_L1, L2, L2) :- true.

select_element(Goal, [Head | Tail], Selected) :- select_element(Goal, Tail, Head, Selected).
select_element(_Goal, [], Selected, Selected) :- true.
select_element(Goal, [Head | Tail], Current, FinalSelected) :- call(Goal, Head, Current, Selected),
    select_element(Goal, Tail, Selected, FinalSelected).

longest_cicle(LongestCicle):- findall(L1,searchCicles(L1), Cicles), select_element(get_longer_list, Cicles, LongestCicle).

shuffle(InList, OutList) :- length(InList,N), randseq(N, N, X), 
                shuffling(X, InList, OutList).
shuffling([],_,[]):-true.
shuffling([H|T],InList,[V|T2]):- nth1(H, InList, V), shuffling(T, InList, T2).

sendPath:- agent(M), open_web_socket(Stream),
						write(Stream,M), write(Stream,'_.._'),
               			current_identifier(Identifier),
               			write(Stream,Identifier), write(Stream,'_.._'),
               			write(Stream,'path'), write(Stream,'_.._'),
               			move_to_start(X1,Y1),
						write(Stream, '{"path":'), path(X1,Y1, Stream), write(Stream, '}'), close_web_socket(Stream).

move_to_start(1,1):-move_to_evaluate(1,1,_X,_Y).
move_to_start(X,Y):-move_to_evaluate(X,Y,_X,_Y).

path(X,Y, Stream):- write(Stream, '['), path(X,Y,X,Y, Stream), format(Stream, '{"x":"~d","y":"~d"}]', [X, Y]).
path(X,Y,X1,Y1, Stream):- move_to_evaluate(X1,Y1,X,Y), format(Stream, '{"x":"~d","y":"~d"},', [X1, Y1]), move_to_evaluate(X1,Y1,X,Y).
path(X,Y,X1,Y1, Stream):- move_to_evaluate(X1,Y1,X2,Y2), format(Stream, '{"x":"~d","y":"~d"},', [X1, Y1]), move_to_evaluate(X1,Y1,X2,Y2), path(X,Y,X2,Y2, Stream).

save_move_to_evaluate([X1|[Y1|[X2|[Y2|T]]]]):- assert(move_to_evaluate(X1,Y1,X2,Y2)), size_move_to_evaluate(S), retractall(size_move_to_evaluate(_)), S1 is S-1, assert(size_move_to_evaluate(S1)).
save_forbidden_of_problem([X1|[Y1|T]]):- assert(current_forbidden(X1,Y1)), number_of_forbidden(S), retractall(number_of_forbidden(_)), S1 is S-1, assert(number_of_forbidden(S1)).

new_connectionE(Identifier):> write(Identifier),nl, retractall(current_identifier(_)), assert(current_identifier(Identifier)), reset_state, ack.

instanceReadyE(Size,NumberOfForbidden):> write('Size of the problem'), write(Size), nl, 
					   retractall(current_size(_)), assert(current_size(Size)),
					   retractall(current_forbidden(_,_)), 
					   retractall(number_of_forbidden(_)), assert(number_of_forbidden(NumberOfForbidden)),
					   next_state,
					   sendData('pr'), write('Instance received'), nl.

instanceReadyE(Size,Forbidden):> write('Size of the problem: '), write(Size), nl, 
					   retractall(current_size(_)), assert(current_size(Size)),
					   retractall(current_forbidden(_,_)), save_forbidden(Forbidden), next_state,
					   sendData('pr'), write('Instance received'), nl.
					   
is_instance_ready:-system_state(1), number_of_forbidden(0).
is_instance_readyI:> nl, next_state, write(is_instance_ready), nl, run_asp_solver_actionA.

can_start_solver:-run_asp_solver_actionP, system_state(2).
can_start_solverI:> next_state, write(can_start_solver), nl, launch_instance(1).

problem_failedE(Problem):- send_failed(Problem), S1 is Problem+1, launch_instance(S1).

send_failed(1):-sendData('pf1').
send_failed(2):-sendData('pf2').
send_failed(3):-sendData('pf3').
send_failed(4):-sendData('pft').

launch_instance(1):-sendData('ss1').
launch_instance(2):-sendData('ss2').
launch_instance(3):-sendData('ss4').
launch_instance(4):-write('trivial path'), nl, sendData('ss3'), send_trivial_path.

new_moves_for_evaluateE(NumberOfMoves):> write('Number of moves '), write(NumberOfMoves), nl, retractall(size_move_to_evaluate(_)), retractall(move_to_evaluate(_,_,_,_)), assert(size_move_to_evaluate(NumberOfMoves)), next_state, sendData('smr').
moves_for_evaluateE(Move):- save_move_to_evaluate(Move), write(.).

forbidden_of_problemE(Forbidden):- save_forbidden_of_problem(Forbidden), write(.).

ready_for_elaboration:- system_state(4), size_move_to_evaluate(0).
ready_for_elaborationI:> nl, next_state, evaluate_path.

row_col(X) :- current_size(S), N is S+1, X > 0, X < N.
cell(X,Y) :- row_col(X), row_col(Y).

send_trivial_path:- agent(M), open_web_socket(Stream),
           write(Stream,M), write(Stream,'_.._'),
           current_identifier(Identifier),
           write(Stream,Identifier), write(Stream,'_.._'),
           write(Stream,'path'), write(Stream,'_.._'),
           write(Stream, '{"path":['),
           format(Stream, '{"x":"~d","y":"~d"}', [1, 1]),
           trivial_next(1,1, Stream),
           retractall(trivial_reached(_,_)),
           write(Stream, ']}'), 
           close_web_socket(Stream).

trivial_next(X,Y, Stream):- trivial_search_next(X,Y,L), shuffle(L, LShuffle), trivial_select_next(LShuffle,X1,Y1), assert(trivial_reached(X1,Y1)),
                    format(Stream, ',{"x":"~d","y":"~d"}', [X1, Y1]), trivial_next(X1,Y1, Stream).
trivial_next(X,Y, Stream):-true.

trivial_search_next(X,Y,[
                trivial_move(X1,Y1), trivial_move(X2,Y2), trivial_move(X3,Y3), trivial_move(X4,Y4),
                trivial_move(X5,Y5), trivial_move(X6,Y6), trivial_move(X7,Y7), trivial_move(X8,Y8)
                        ]):-
                X1 is X+1, Y1 is Y+2, X2 is X+2, Y2 is Y+1, X3 is X+1, Y3 is Y-2,
                X4 is X+2, Y4 is Y-1, X5 is X-1, Y5 is Y-2, X6 is X-2, Y6 is Y-1,
                X7 is X-1, Y7 is Y+2, X8 is X-2, Y8 is Y+1.

trivial_select_next([trivial_move(X1,Y1)|_T], X1,Y1):- cell(X1,Y1),
				 not(current_forbidden(X1,Y1)),
				 not(trivial_reached(X1,Y1)).
trivial_select_next([_H|T], X1,Y1):- trivial_select_next(T, X1,Y1).